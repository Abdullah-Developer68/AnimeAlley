@startuml AAMB Component Diagram

skinparam componentStyle rectangle
skinparam backgroundColor white
skinparam shadowing false
skinparam component {
    BackgroundColor<<client>> #E1F5FF
    BackgroundColor<<server>> #E8F5E9
    BackgroundColor<<external>> #FFE0B2
    BackgroundColor<<database>> #FFF9C4
    BackgroundColor<<storage>> #F3E5F5
}

title AAMB E-Commerce Application - Component Diagram

' ========== EXTERNAL SERVICES ==========
cloud "External Services" {
    component "Google OAuth" as google <<external>>
    component "Stripe Payment" as stripe <<external>>
    component "Cloudinary Storage" as cloudinary <<external>>
}

' ========== CLIENT LAYER ==========
package "Client Application\n(React/Vite)" #E1F5FF {

    component "App.jsx" as mainApp <<client>>

    package "Pages" {
        component "Home" as homePage <<client>>
        component "Shop" as shopPage <<client>>
        component "Cart" as cartPage <<client>>
        component "Checkout" as checkoutPage <<client>>
        component "Dashboard" as dashboardPage <<client>>
        component "Login/SignUp" as authPage <<client>>
        component "Product Details" as productPage <<client>>
        component "User History" as historyPage <<client>>
    }

    package "UI Components" {
        component "Cart Components" as cartComp <<client>>
        component "Dashboard Components" as dashComp <<client>>
        component "Shop Components" as shopComp <<client>>
        component "Home Components" as homeComp <<client>>
        component "Global Components" as globalComp <<client>>
        component "Protected Route" as protectedRoute <<client>>
    }

    package "State Management" {
        component "Redux Store" as redux <<client>>
        component "Context Providers" as context <<client>>
    }

    component "Custom Hooks" as hooks <<client>>
    component "Client Utilities" as clientUtils <<client>>

    component "API Client\n(Axios)" as apiClient <<client>> {
    }
}

' ========== SERVER LAYER ==========
package "Server Application\n(Node.js/Express)" #E8F5E9 {

    component "App.js\n(Express App)" as expressApp <<server>>

    package "Routes" {
        component "Auth Routes" as authRoute <<server>>
        component "Google Auth Routes" as googleRoute <<server>>
        component "Product Routes" as productRoute <<server>>
        component "Order Routes" as orderRoute <<server>>
        component "User Routes" as userRoute <<server>>
        component "Coupon Routes" as couponRoute <<server>>
        component "Cart Routes" as cartRoute <<server>>
        component "Stripe Routes" as stripeRoute <<server>>
        component "Export Routes" as exportRoute <<server>>
        component "Reservation Routes" as reservationRoute <<server>>
    }

    package "Controllers" {
        component "User Controller" as userCtrl <<server>>
        component "Product Controller" as productCtrl <<server>>
        component "Order Controller" as orderCtrl <<server>>
        component "Coupon Controller" as couponCtrl <<server>>
        component "Export Controller" as exportCtrl <<server>>
        component "Reservation Controller" as reservationCtrl <<server>>
    }

    package "Services" {
        component "Auth Service" as authService <<server>>
        component "Google Auth Service" as googleService <<server>>
        component "Stripe Service" as stripeService <<server>>
        component "Export Service" as exportService <<server>>
    }

    package "Middlewares" {
        component "Authentication" as authMiddleware <<server>>
        component "Authorization" as authzMiddleware <<server>>
        component "Validation" as validationMiddleware <<server>>
        component "Error Handling" as errorMiddleware <<server>>
    }

    package "Models" {
        component "User Model" as userModel <<server>>
        component "Product Model" as productModel <<server>>
        component "Order Model" as orderModel <<server>>
        component "Coupon Model" as couponModel <<server>>
        component "Reservation Model" as reservationModel <<server>>
    }

    package "Configuration" {
        component "Database Config" as dbConfig <<server>>
        component "Passport Config" as passportConfig <<server>>
        component "Cloudinary Config" as cloudinaryConfig <<server>>
    }

    component "Stripe Webhook Handler" as webhook <<server>>
    component "Server Utilities" as serverUtils <<server>>
}

' ========== DATA STORAGE ==========
database "MongoDB" as mongodb <<database>> {
    frame "Collections" {
        storage "users" as usersDB
        storage "products" as productsDB
        storage "orders" as ordersDB
        storage "coupons" as couponsDB
        storage "reservations" as reservationsDB
    }
}

frame "Browser Storage" <<storage>> {
    storage "localStorage" as localStorage
    storage "sessionStorage" as sessionStorage
    storage "cookies" as cookies
}

' ========== CLIENT INTERNAL CONNECTIONS ==========
mainApp --> homePage
mainApp --> shopPage
mainApp --> cartPage
mainApp --> checkoutPage
mainApp --> dashboardPage
mainApp --> authPage

homePage --> homeComp
shopPage --> shopComp
cartPage --> cartComp
dashboardPage --> dashComp

mainApp --> redux
mainApp --> context
mainApp --> hooks
mainApp --> apiClient

redux ..> apiClient : triggers
context ..> apiClient : triggers
hooks ..> apiClient : calls

cartComp --> redux
dashComp --> redux
shopComp --> redux
homeComp --> context

protectedRoute ..> authMiddleware : validates

' ========== CLIENT-SERVER COMMUNICATION ==========
apiClient -down-> expressApp : HTTP/REST API\n(JWT Auth)

' ========== SERVER INTERNAL FLOW ==========
expressApp --> authRoute
expressApp --> googleRoute
expressApp --> productRoute
expressApp --> orderRoute
expressApp --> userRoute
expressApp --> couponRoute
expressApp --> cartRoute
expressApp --> stripeRoute
expressApp --> webhook

authRoute --> authMiddleware
productRoute --> authzMiddleware
orderRoute --> authzMiddleware

authRoute --> userCtrl
productRoute --> productCtrl
orderRoute --> orderCtrl
userRoute --> userCtrl
couponRoute --> couponCtrl
cartRoute --> orderCtrl
stripeRoute --> orderCtrl
reservationRoute --> reservationCtrl

userCtrl --> authService
userCtrl --> userModel
productCtrl --> productModel
orderCtrl --> orderModel
orderCtrl --> stripeService
couponCtrl --> couponModel
reservationCtrl --> reservationModel
exportCtrl --> exportService

authService --> userModel
googleService --> userModel
stripeService --> orderModel
exportService --> userModel
exportService --> productModel
exportService --> orderModel

' ========== CONFIGURATION ==========
dbConfig --> mongodb
passportConfig --> googleService
cloudinaryConfig --> productCtrl

' ========== DATABASE CONNECTIONS ==========
userModel -down-> usersDB
productModel -down-> productsDB
orderModel -down-> ordersDB
couponModel -down-> couponsDB
reservationModel -down-> reservationsDB

' ========== EXTERNAL INTEGRATIONS ==========
googleService -up-> google : OAuth 2.0
stripeService -up-> stripe : Payment API
webhook <-up- stripe : Webhook Events
cloudinaryConfig -up-> cloudinary : Image Upload

' ========== BROWSER STORAGE ==========
apiClient -left-> localStorage : JWT Token
apiClient -left-> cookies : Session
redux -left-> sessionStorage : Cart State

' ========== NOTES ==========
note right of apiClient
  **Key API Endpoints:**
  • /api/auth/* - Authentication
  • /api/googleAuth/* - OAuth
  • /api/product/* - Products
  • /api/order/* - Orders
  • /api/user/* - User Management
  • /api/coupon/* - Coupons
  • /api/cart/* - Shopping Cart
  • /api/stripe/* - Payments
  • /api/export/* - Data Export
end note

note bottom of mongodb
  **Database:** MongoDB
  Stores all application data
  including users, products,
  orders, and coupons
end note

note top of "External Services"
  **Third-Party Services:**
  • Google OAuth for authentication
  • Stripe for payment processing
  • Cloudinary for image storage
end note

@enduml
