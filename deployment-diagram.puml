@startuml AAMB Deployment Diagram

skinparam backgroundColor white
skinparam shadowing false
skinparam node {
    BackgroundColor<<vercel>> #000000
    FontColor<<vercel>> #FFFFFF
    BackgroundColor<<cdn>> #00C7B7
    FontColor<<cdn>> #FFFFFF
    BackgroundColor<<serverless>> #6E56CF
    FontColor<<serverless>> #FFFFFF
    BackgroundColor<<external>> #FFE0B2
    BackgroundColor<<device>> #E3F2FD
    BackgroundColor<<database>> #FFF9C4
}

title AAMB E-Commerce Application - Deployment Diagram

' ========== USER DEVICES ==========
node "User's Device" <<device>> {
    component "Web Browser" as browser {
        artifact "React Application\n(JavaScript Bundle)" as reactApp
        artifact "Redux Store" as reduxStore
        artifact "localStorage/Cookies" as browserStorage
    }
}

' ========== VERCEL PLATFORM ==========
cloud "Vercel Cloud Platform" <<vercel>> {

    ' Client Deployment
    node "Vercel CDN/Edge Network" <<cdn>> {
        artifact "Static Assets\n(HTML, CSS, JS)" as staticAssets
        artifact "index.html" as indexHtml
        artifact "Built React App" as builtReact
        note right of builtReact
            Built with Vite
            Optimized bundles
            Deployed globally
        end note
    }

    ' Server Deployment
    node "Vercel Serverless Functions" <<serverless>> {
        component "Node.js Runtime" as nodeRuntime {
            artifact "app.js\n(Express Application)" as expressApp
            artifact "API Routes" as apiRoutes
            artifact "Controllers" as controllers
            artifact "Services" as services
            artifact "Models (Mongoose)" as models
            artifact "Middlewares" as middlewares
        }

        component "Webhook Handler" as webhookHandler {
            artifact "Stripe Webhook\nProcessor" as stripeWebhook
        }

        component "Scheduled Jobs\n(Vercel Cron)" as cronJobs {
            artifact "Cleanup Users\n(Daily 2 AM)" as cleanupUsers
            artifact "Cleanup Reservations\n(Daily 3 AM)" as cleanupReservations
        }
    }
}

' ========== EXTERNAL SERVICES ==========
cloud "External Services" {

    node "MongoDB Atlas" <<database>> {
        database "MongoDB Cluster" as mongoCluster {
            frame "Collections" {
                storage "users" as usersCollection
                storage "products" as productsCollection
                storage "orders" as ordersCollection
                storage "coupons" as couponsCollection
                storage "reservations" as reservationsCollection
            }
        }
    }

    node "Google Cloud" <<external>> {
        component "Google OAuth 2.0" as googleAuth
    }

    node "Stripe" <<external>> {
        component "Payment API" as stripeAPI
        component "Webhook Events" as stripeWebhooks
    }

    node "Cloudinary" <<external>> {
        component "Image Storage\n& CDN" as cloudinary
    }
}

' ========== USER TO CLIENT CONNECTIONS ==========
browser -down-> staticAssets : HTTPS GET\n(Initial Load)
staticAssets -up-> browser : HTML/CSS/JS\n(Static Files)
reactApp ..> browserStorage : Store/Retrieve\n(Auth Token, Cart)

' ========== CLIENT TO SERVER CONNECTIONS ==========
browser -down-> expressApp : HTTPS REST API\n(JWT Auth)\n/api/*
expressApp -up-> browser : JSON Responses

' ========== SERVER INTERNAL FLOW ==========
expressApp --> apiRoutes : Route Requests
apiRoutes --> middlewares : Authentication/\nAuthorization
middlewares --> controllers : Validated Request
controllers --> services : Business Logic
services --> models : Data Operations

' ========== SERVER TO DATABASE ==========
models -down-> mongoCluster : MongoDB Protocol\n(Mongoose ODM)
mongoCluster -up-> models : Query Results

' ========== SERVER TO EXTERNAL SERVICES ==========
services -right-> googleAuth : OAuth 2.0\nAuthentication
googleAuth -left-> services : User Profile\n& Token

services -right-> stripeAPI : Payment Processing\nAPI Calls
stripeAPI -left-> services : Payment Status

stripeWebhooks -left-> webhookHandler : POST /api/stripe/webhook\n(Payment Events)

services -right-> cloudinary : Image Upload\nAPI
cloudinary -left-> services : Image URLs

' ========== CRON JOBS ==========
cronJobs --> controllers : Scheduled\nCleanup Tasks
cleanupUsers ..> models : Delete Inactive Users
cleanupReservations ..> models : Release Expired\nReservations

' ========== DEPLOYMENT NOTES ==========
note top of "Vercel Cloud Platform"
    **Deployment Platform: Vercel**
    • Automatic deployments from Git
    • Serverless architecture
    • Global CDN distribution
    • Environment variables management
    • Automatic SSL/HTTPS
end note

note right of "Vercel CDN/Edge Network"
    **Frontend Deployment:**
    • React app built with Vite
    • Static files served from CDN
    • Global edge network
    • SPA routing via rewrites
end note

note right of "Vercel Serverless Functions"
    **Backend Deployment:**
    • Node.js serverless functions
    • Auto-scaling
    • Cold start optimization
    • Environment: Node.js runtime
end note

note bottom of mongoCluster
    **Database: MongoDB Atlas**
    • Cloud-hosted database
    • Always-on availability
    • Automatic backups
    • Connection via MongoDB URI
end note

note right of cronJobs
    **Scheduled Tasks:**
    • User cleanup: Daily at 2 AM UTC
    • Reservation cleanup: Daily at 3 AM UTC
    • Configured in vercel.json
end note

legend right
    |= Symbol |= Meaning |
    | <<vercel>> | Vercel Platform |
    | <<cdn>> | CDN/Edge Network |
    | <<serverless>> | Serverless Functions |
    | <<external>> | External Service |
    | <<database>> | Database Service |
    | <<device>> | User Device |
    | --> | Synchronous Communication |
    | ..> | Asynchronous/Event-based |
endlegend

@enduml
